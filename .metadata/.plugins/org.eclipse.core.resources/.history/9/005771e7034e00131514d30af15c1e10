<?xml version="1.0" encoding="UTF-8"?>
<facelet-taglib version="2.0" xmlns="http://java.sun.com/xml/ns/javaee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibary_2_0.xsd">
 <namespace>http://componentes.gpe/component/sh</namespace>
 <tag>
  <description>Esse componente é responsável por atribuir as funcionalidades do Knockout ao componente pai</description>
  <tag-name>binding</tag-name>
  <handler-class>br.com.gpetec.view.components.ko.KnockoutBindingHandler</handler-class>
  <attribute>
   <description>The visible binding causes the associated DOM element to become hidden or visible according to the value you pass to the binding.</description>
   <name>visible</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The text binding causes the associated DOM element to display the text value of your parameter.
                 Typically this is useful with elements like &lt;span&gt; or &lt;em&gt; that traditionally display text, but technically you can use it with any element.</description>
   <name>text</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The html binding causes the associated DOM element to display the HTML specified by your parameter.
                 Typically this is useful when values in your view model are actually strings of HTML markup that you want to render.</description>
   <name>html</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The css binding adds or removes one or more named CSS classes to the associated DOM element. This is useful, for example, to highlight some value in red if it becomes negative.</description>
   <name>css</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The style binding adds or removes one or more style values to the associated DOM element. This is useful, for example, to highlight some value in red if it becomes negative, or to set the width of a bar to match a numerical value that changes.</description>
   <name>style</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The attr binding provides a generic way to set the value of any attribute for the associated DOM element. This is useful, for example, when you need to set the title attribute of an element, the src of an img tag, or the href of a link based on values in your view model, with the attribute value being updated automatically whenever the corresponding model property changes.</description>
   <name>attr</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The click binding adds an event handler so that your chosen JavaScript function will be invoked when the associated DOM element is clicked. This is most commonly used with elements like button, input, and a, but actually works with any visible DOM element.</description>
   <name>click</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The event binding allows you to add an event handler for a specified event so that your chosen JavaScript function will be invoked when that event is triggered for the associated DOM element. This can be used to bind to any event, such as keypress, mouseover or mouseout.</description>
   <name>event</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The submit binding adds an event handler so that your chosen JavaScript function will be invoked when the associated DOM element is submitted. Typically you will only want to use this on form elements.
                 When you use the submit binding on a form, Knockout will prevent the browser’s default submit action for that form. In other words, the browser will call your handler function but will not submit the form to the server. This is a useful default because when you use the submit binding, it’s normally because you’re using the form as an interface to your view model, not as a regular HTML form. If you do want to let the form submit like a normal HTML form, just return true from your submit handler.</description>
   <name>submit</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The enable binding causes the associated DOM element to be enabled only when the parameter value is true. This is useful with form elements like input, select, and textarea.</description>
   <name>enable</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The disable binding causes the associated DOM element to be disabled only when the parameter value is true. This is useful with form elements like input, select, and textarea.
                 This is the mirror image of the enable binding.</description>
   <name>disable</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The value binding links the associated DOM element’s value with a property on your view model. This is typically useful with form elements such as &lt;input&gt;, &lt;select&gt; and &lt;textarea&gt;.
                 When the user edits the value in the associated form control, it updates the value on your view model. Likewise, when you update the value in your view model, this updates the value of the form control on screen.</description>
   <name>value</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>If your binding also includes a parameter called valueUpdate, this defines additional browser events KO should use to detect changes besides the change event.
                The following string values are the most commonly useful choices:
                    &lt;li&gt;keyup updates your view model when the user releases a key.&lt;/li&gt;
                    &lt;li&gt;keypress updates your view model when the user has typed a key. Unlike keyup, this updates repeatedly while the user holds a key down.&lt;/li&gt;
                    &lt;li&gt;afterkeydown updates your view model as soon as the user begins typing a character. This works by catching the browser’s keydown event and handling the event asynchronously.&lt;/li&gt;
                    Of these options, "afterkeydown" is the best choice if you want to keep your view model updated in real-time.
   </description>
   <name>valueUpdate</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The hasfocus binding links a DOM element’s focus state with a viewmodel property. It is a two-way binding.</description>
   <name>hasfocus</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The checked binding links a checkable form control — i.e., a checkbox (&lt;input type='checkbox'&gt;) or a radio button (&lt;input type='radio'&gt;) — with a property on your view model.
                 When the user checks the associated form control, this updates the value on your view model. Likewise, when you update the value in your view model, this checks or unchecks the form control on screen.</description>
   <name>checked</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The options binding controls what options should appear in a drop-down list (i.e., a &lt;select&gt; element) or multi-select list (e.g., &lt;select size='6'&gt;). This binding cannot be used with anything other than &lt;select&gt; elements.</description>
   <name>options</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The selectedOptions binding controls which elements in a multi-select list are currently selected. This is intended to be used in conjunction with a &lt;select&gt; element and the options binding.</description>
   <name>selectedOptions</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The uniqueName binding ensures that the associated DOM element has a nonempty name attribute. If the DOM element did not have a name attribute, this binding gives it one and sets it to some unique string value.</description>
   <name>uniqueName</name>
   <required>no</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>rendered</name>
   <required>no</required>
   <type>java.lang.Boolean</type>
  </attribute>
 </tag>
 <tag>
  <tag-name>table</tag-name>
  <component>
   <component-type>org.gpe.knockoutTable</component-type>
   <renderer-type>gpe.dataTableRenderer</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se a tabela vai ter scroll ou crescerá indefinidamente.</description>
   <name>scrollable</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Mensagem que aparecerá quando a tabela estiver vazia</description>
   <name>emptyMessage</name>
  </attribute>
  <attribute>
   <name>style</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>styleClass</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>rowStyleClass</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Não utilizado ainda.</description>
   <name>scrollrows</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>tableStyle</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>tableStyleClass</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>value</name>
  </attribute>
  <attribute>
   <description>Variável do viewmodel ao qual será feito o binding</description>
   <name>foreach</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>var</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>selection</name>
  </attribute>
  <attribute>
   <description>Coloca cor sim cor não na tabela. Valor default é true.</description>
   <name>even</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Insere o onhover para marcar a linha qu está em foco.
Valor default é true.</description>
   <name>mark</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Default value 'false'.
Indica se a tabela vai utilzar drag and drop.</description>
   <name>sortable</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica se é permitido selecionar mais de um item nessa tabela.
Se o atributo selection for definido para esta tabela, selectionMode assume o valor default 'single'.
</description>
   <name>selectionMode</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Observable que guardará o último objeto clicado.</description>
   <name>koLastClick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>koSelection</name>
  </attribute>
  <attribute>
   <description>Indica se o click de seleção da tabela será cumulativo, isso é, como se estivesse com o control sempre pressionado</description>
   <name>cumulativeSelection</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <name>height</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>column</tag-name>
  <component>
   <component-type>org.gpe.knockoutColumn</component-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Unique identifier of the component in a namingContainer.</description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</description>
   <name>rendered</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>An el expression referring to a server side UIComponent instance in a backing bean.</description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Property to be used for sorting.</description>
   <name>sortBy</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Inline style of the column.</description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Style class of the column.</description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Custom pluggable sortFunction.</description>
   <name>sortFunction</name>
   <required>false</required>
   <type>javax.el.MethodExpression</type>
  </attribute>
  <attribute>
   <description>Property to be used for filtering.</description>
   <name>filterBy</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Inline style of the filter element.</description>
   <name>filterStyle</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Style class of the filter element.</description>
   <name>filterStyleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>A collection of selectitems for filter dropdown.</description>
   <name>filterOptions</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Match mode for filtering.</description>
   <name>filterMatchMode</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Location of the column filter with respect to header content. Options are 'bottom'(default) and 'top'.</description>
   <name>filterPosition</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Defines the number of rows the column spans.</description>
   <name>rowspan</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Defines the number of columns the column spans.</description>
   <name>colspan</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Shortcut for header facet.</description>
   <name>headerText</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Shortcut for footer facet.</description>
   <name>footerText</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Enables selection mode, valid values are "single" and "multiple".</description>
   <name>selectionMode</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Disables row selection when true.</description>
   <name>disabledSelection</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Maximum number of characters for an input filter.</description>
   <name>filterMaxLength</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Specifies resizable feature at column level. Datatable's resizableColumns must be enabled to use this option.</description>
   <name>resizable</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Defines if the column should be exported by dataexporter.</description>
   <name>exportable</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Value of the filter field.</description>
   <name>filterValue</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Width of the column in pixels or percentage.</description>
   <name>width</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <tag-name>context</tag-name>
  <handler-class>br.com.gpetec.view.components.ko.KnockoutContextHandler</handler-class>
  <attribute>
   <name>value</name>
  </attribute>
  <attribute>
   <name>rendered</name>
  </attribute>
 </tag>
 <tag>
  <description>Componente Popup com modelo Knockout</description>
  <tag-name>popup</tag-name>
  <component>
   <component-type>koPopUp</component-type>
   <renderer-type>gpe.ko.popup</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <name>id</name>
  </attribute>
  <attribute>
   <name>rendered</name>
  </attribute>
  <attribute>
   <description>conteúdo do popup. Deve ser um arquivo .xhtml</description>
   <name>src</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Título exibido quando o popup está maximizado.</description>
   <name>maximizedTitle</name>
  </attribute>
  <attribute>
   <description>Título exibido quando o popup está minimizado.</description>
   <name>minimizedTitle</name>
  </attribute>
  <attribute>
   <description>Indica se o popup deve aparecer inicialmente maximizado.</description>
   <name>showMaximized</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica que o popup deve ser exibido, inicialmente, minimizado.</description>
   <name>showMinimized</name>
  </attribute>
  <attribute>
   <name>titleBinding</name>
  </attribute>
 </tag>
 <tag>
  <description>Componente responsável pelo Quadro de Tarefas com modelo Knockout e seu comportamento</description>
  <tag-name>taskBoard</tag-name>
  <component>
   <component-type>koTaskBoard</component-type>
   <renderer-type>gpe.ko.taskBoard</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Fonte de dados do Quadro de Tarefas</description>
   <name>data</name>
   <type>br.com.gpetec.scrumhalf.vo.QuadroTarefasVO</type>
  </attribute>
  <attribute>
   <description>Informa se o quadro está bloqueado ou nao.</description>
   <name>blocked</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <name>enableDragDrop</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>progressBar</tag-name>
  <component>
   <component-type>a</component-type>
   <handler-class/>
  </component>
  <attribute>
   <name>id</name>
  </attribute>
  <attribute>
   <name>rendered</name>
  </attribute>
  <attribute>
   <name>partialValue</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>totalValue</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>style</name>
  </attribute>
  <attribute>
   <name>styleClass</name>
  </attribute>
 </tag>
</facelet-taglib>
