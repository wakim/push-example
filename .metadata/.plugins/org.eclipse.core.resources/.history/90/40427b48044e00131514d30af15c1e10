<?xml version="1.0" encoding="UTF-8"?>
<facelet-taglib version="2.0" xmlns="http://java.sun.com/xml/ns/javaee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibary_2_0.xsd">
 <namespace>http://componentes.gpe/component/sh</namespace>
 <tag>
  <description>Uma extensão do panelGrid que customiza a criação de formulários do scrumHalf.</description>
  <!-- Componentes -->
  <tag-name>containerFormulario</tag-name>
  <component>
   <component-type>shPanelGrid</component-type>
   <handler-class/>
  </component>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Name or code of the background color for this table.
            </description>
   <name>bgcolor</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Comma separated list of row indices for which a new
                "tbody" element should be started (and any
                previously opened one should be ended).
            </description>
   <name>bodyrows</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Width (in pixels) of the border to be drawn
                around this table.
            </description>
   <name>border</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) that will be
                applied to any caption generated for this table.
            </description>
   <name>captionClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this caption is rendered.
            </description>
   <name>captionStyle</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Definition of how much space the user agent should
                leave between the border of each cell and its contents.
            </description>
   <name>cellpadding</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Definition of how much space the user agent should
                leave between the left side of the table and the
                leftmost column, the top of the table and the top of
                the top side of the topmost row, and so on for the
                right and bottom of the table. It also specifies
                the amount of space to leave between cells.
            </description>
   <name>cellspacing</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Comma-delimited list of CSS style classes that will be applied
                to the columns of this table. A space separated list of
                classes may also be specified for any individual column. If
                the number of elements in this list is less than the number of
                actual column children of the UIData, no "class"
                attribute is output for each column greater than the number of
                elements in the list. If the number of elements in the list
                is greater than the number of actual column children of the
                UIData, the elements at the posisiton in the list
                after the last column are ignored.
            </description>
   <name>columnClasses</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The number of columns to render before
                starting a new row.
Defaul value is 2.
            </description>
   <name>columns</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) that will be
                applied to any footer generated for this table.
            </description>
   <name>footerClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code specifying which sides of the frame surrounding
                this table will be visible. Valid values are:
                none (no sides, default value); above (top side only);
                below (bottom side only); hsides (top and bottom sides
                only); vsides (right and left sides only); lhs (left
                hand side only); rhs (right hand side only); box
                (all four sides); and border (all four sides).
            </description>
   <name>frame</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) that will be
                applied to any header generated for this table.
            </description>
   <name>headerClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Possui valor default.
                Comma-delimited list of CSS style classes that will be applied
                to the rows of this table. A space separated list of classes
                may also be specified for any individual row. Thes styles are
                applied, in turn, to each row in the table. For example, if
                the list has two elements, the first style class in the list
                is applied to the first row, the second to the second row, the
                first to the third row, the second to the fourth row, etc. In
                other words, we keep iterating through the list until we reach
                the end, and then we start at the beginning again.
            </description>
   <name>rowClasses</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code specifying which rules will appear between cells
                within this table. Valid values are: none (no rules,
                default value); groups (between row groups); rows
                (between rows only); cols (between columns only); and
                all (between all rows and columns).
            </description>
   <name>rules</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Summary of this table's purpose and structure, for
                user agents rendering to non-visual media such as
                speech and Braille.
            </description>
   <name>summary</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Width of the entire table, for visual user agents.
            </description>
   <name>width</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Classe usada nas células da primeira coluna. Só serve quando o containerFormulario for definido com 2 colunas.</description>
   <name>column1classes</name>
  </attribute>
  <attribute>
   <description>Classe usada nas células da segunda coluna. Só serve quando o containerFormulario for definido com 2 colunas.</description>
   <name>column2classes</name>
  </attribute>
 </tag>
 <tag>
  <description>
            Intended for use in situations when only one
            UIComponent child can be nested, such as in the case of facets.
            If the "style" or "styleClass" attributes are present, and the
            "layout"
            attribute is present with a value of "block", render a "div"
            element,
            outputting the value of the "style" attribute as the value of the
            "style" attribute and the value of the "styleClass" attribute as the
            value of the "class" attribute. Otherwise, if the "layout" attribute
            is not present, or the "layout" attribute contains a value other
            than
            "block", render a "span" element, outputting the value of the
            "style" attribute as the value of the "style" attribute, and the
            value
            of the "styleClass" attribute as the value of the "class"
            attribute.
        </description>
  <tag-name>panelGroup</tag-name>
  <component>
   <component-type>shPanelGroup</component-type>
   <handler-class/>
  </component>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The type of layout markup to use when rendering this group.
                If the value is "block" the renderer must produce an HTML
                "div" element. Otherwise HTML "span" element must
                be produced.
            </description>
   <name>layout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" property on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Usado em conjunto com o containerFormulario para gerar este atributo nas tabelas dos formulários criados.</description>
   <name>colSpan</name>
  </attribute>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;Renders an HTML "input"
            element of "type" "text".&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If the
            &lt;code&gt;Map&lt;/code&gt; contains an entry for the "clientId" of
            the
            component, pass the value of the entry to the
            &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the
            component, which
            must be an instance of &lt;code&gt;EditableValueHolder&lt;/code&gt;.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt; Render the clientId of the component as
            the value of the "name" attribute. Render the current value of
            the component as the value of the "value" attribute. If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute.
            &lt;/p&gt;
            &lt;/ul&gt;
        </description>
  <tag-name>inputText</tag-name>
  <component>
   <component-type>shInputText</component-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
   <name>required</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
   <name>validator</name>
   <required>false</required>
   <method-signature>void validate(javax.faces.context.FacesContext,
                javax.faces.component.UIComponent, java.lang.Object)</method-signature>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
   <name>valueChangeListener</name>
   <required>false</required>
   <method-signature>void
                valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Alternate textual description of the
                element rendered by this component.
            </description>
   <name>alt</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                If the value of this attribute is "off", render "off" as the
                value
                of the attribute. This indicates that the browser should
                disable its autocomplete feature for this component. This is
                useful for components that perform autocompletion and do not
                want the browser interfering. If this attribute is not set or
                the value
                is "on", render nothing.
            </description>
   <name>autocomplete</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente caso ele esteja dentro de um containerFormulario.
            </description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The maximum number of characters that may
                be entered in this field.
            </description>
   <name>maxlength</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The number of characters used to determine
                the width of this field.
            </description>
   <name>size</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Possui valor default.
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Indica se o símbolo de campo obrigatório deve ser mostrado junto com o inputText.
Valor default 'false'.</description>
   <name>obrigatorio</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Specifies a short hint that describes the expected value of the input field</description>
   <name>placeholder</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>For knockout.js use.</description>
   <name>data-bind</name>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;Renders an HTML "input"
            element of "type" "text".&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If the
            &lt;code&gt;Map&lt;/code&gt; contains an entry for the "clientId" of
            the
            component, pass the value of the entry to the
            &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the
            component, which
            must be an instance of &lt;code&gt;EditableValueHolder&lt;/code&gt;.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt; Render the clientId of the component as
            the value of the "name" attribute. Render the current value of
            the component as the value of the "value" attribute. If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute.
            &lt;/p&gt;
            &lt;/ul&gt;
        </description>
  <tag-name>inputNumber</tag-name>
  <component>
   <component-type>shInputNumber</component-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica o número máximo de casas decimais permitidas. Valor default é 2.</description>
   <name>maxFractionDigits</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica o número mínimo de casas decimais permitidas. Valor default é 0.</description>
   <name>minFractionDigits</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica o tipo de formato do número. Opções: currency, number e percent. Valor default é number.</description>
   <name>type</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica o simbolo de moeda.</description>
   <name>currencySymbol</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica o padrão do formato do número.</description>
   <name>pattern</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Flag para permitir apenas inteiro. Valor default é false.</description>
   <name>intergerOnly</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
   <name>required</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
   <name>validator</name>
   <required>false</required>
   <method-signature>void validate(javax.faces.context.FacesContext,
                javax.faces.component.UIComponent, java.lang.Object)</method-signature>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
   <name>valueChangeListener</name>
   <required>false</required>
   <method-signature>void
                valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Alternate textual description of the
                element rendered by this component.
            </description>
   <name>alt</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                If the value of this attribute is "off", render "off" as the
                value
                of the attribute. This indicates that the browser should
                disable its autocomplete feature for this component. This is
                useful for components that perform autocompletion and do not
                want the browser interfering. If this attribute is not set or
                the value
                is "on", render nothing.
            </description>
   <name>autocomplete</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente caso ele esteja dentro de um containerFormulario.
            </description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The maximum number of characters that may
                be entered in this field.
            </description>
   <name>maxlength</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The number of characters used to determine
                the width of this field.
            </description>
   <name>size</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Possui valor default.
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Indica se o símbolo de campo obrigatório deve ser mostrado junto com o inputText.
Valor default 'false'.</description>
   <name>obrigatorio</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Specifies a short hint that describes the expected value of the input field</description>
   <name>placeholder</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>For knockout.js use.</description>
   <name>data-bind</name>
  </attribute>
 </tag>
 <tag>
  <description>Possui valor default.
            If the "styleClass", "style", "dir" or "lang"
            attributes are present, render a "span" element. If the
            "styleClass" attribute is present, render its value as the value
            of the "class" attribute. If the "style" attribute is present,
            pass it thru. If the "escape" attribute is not present, or it is
            present and its value is "true" all angle brackets should be
            converted to the ampersand xx semicolon syntax when rendering the
            value of the "value" attribute as the value of the component. If
            the "escape" attribute is present and is "false" the value of the
            component should be rendered as text without escaping.
        </description>
  <tag-name>outputText</tag-name>
  <component>
   <component-type>shOutputText</component-type>
   <renderer-type>org.sh.text</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped. This flag
                is set to "true" by default.
            </description>
   <name>escape</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente caso ele esteja dentro de um containerFormulario.</description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>For Knockout.js use</description>
   <name>data-bind</name>
  </attribute>
 </tag>
 <tag>
  <description>
            Renders an HTML "label" element. Render the current value
            of the component as label text if it is specified. If a "for"
            attribute is
            specified, find the component specified by the value of the "for"
            attribute, and render its client id as the value of the "for"
            attribute.
            If "styleClass" attribute is specified, render its value as the
            value
            of the "class" attribute.
        </description>
  <tag-name>label</tag-name>
  <component>
   <component-type>shOutputLabel</component-type>
   <renderer-type>gpe.outputLabel</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped. If omitted, this
                flag is assumed to be "true".
            </description>
   <name>escape</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Client identifier of the component for which this element
                is a label.
            </description>
   <name>for</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Possui valor default.
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;Renders an HTML "input" element of "type" "password".&lt;/p&gt;
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the decode description for the &lt;a
            href="javax.faces.Inputjavax.faces.Text.html#encode"&gt;Input
            Text&lt;/a&gt; renderer.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;
            Render the clientId of the component as the value of the "name"
            attribute. Render the current value of the component as the value
            of the "value" attribute, if and only if the "redisplay" component
            attribute is the string "true". If the "styleClass" attribute is
            specified, render its value as the value of the "class"
            attribute.&lt;/p&gt;
            &lt;/ul&gt;
        </description>
  <tag-name>inputSecret</tag-name>
  <component>
   <component-type>shInputSecret</component-type>
   <renderer-type>org.gpe.inputSecret</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente caso ele esteja dentro de um containerFormulario.</description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica se o símbolo de campo obrigatório deve ser mostrado junto com o inputText.
Valor default 'false'.</description>
   <name>obrigatorio</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
   <name>required</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
   <name>validator</name>
   <required>false</required>
   <method-signature>void validate(javax.faces.context.FacesContext,
                javax.faces.component.UIComponent, java.lang.Object)</method-signature>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
   <name>valueChangeListener</name>
   <required>false</required>
   <method-signature>void
                valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Alternate textual description of the
                element rendered by this component.
            </description>
   <name>alt</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                If the value of this attribute is "off", render "off" as the
                value
                of the attribute. This indicates that the browser should
                disable its autocomplete feature for this component. This is
                useful for components that perform autocompletion and do not
                want the browser interfering. If this attribute is not set or
                the value
                is "on", render nothing.
            </description>
   <name>autocomplete</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The maximum number of characters that may
                be entered in this field.
            </description>
   <name>maxlength</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that any existing value
                in this field should be rendered when the
                form is created. Because this is a potential
                security risk, password values are not
                displayed by default.
            </description>
   <name>redisplay</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The number of characters used to determine
                the width of this field.
            </description>
   <name>size</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
 </tag>
 <tag>
  <tag-name>container</tag-name>
  <component>
   <component-type>shContainer</component-type>
   <handler-class>br.com.gpetec.view.components.sh.handler.SHContainerHandler</handler-class>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
   <name>binding</name>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
   <display-name>Component Identifier</display-name>
   <name>id</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
   <display-name>Rendered Flag</display-name>
   <name>rendered</name>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>O título do container que será exibido.</description>
   <name>titulo</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Se "true", o controle de edição é adicionado ao componente.
Caso contrário, apenas a faceta "controls" é criada (caso exista).</description>
   <name>editavel</name>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;span class="changed_modified_2_0"&gt;
            Renders&lt;/span&gt; an HTML "form" element.
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If the map
            contains
            an entry for the "clientId" of this &lt;code&gt;UIForm&lt;/code&gt;
            component,
            call &lt;code&gt;setSubmitted(true)&lt;/code&gt; on the form,
            otherwise call
            &lt;code&gt;setSubmitted(false)&lt;/code&gt; on the form.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;The value of the "method" attribute must be "post". The
            value
            of the "action" attribute must be the result of passing the view
            identifier of the current view to the &lt;code&gt;getActionURL()&lt;/code&gt;
            method of the &lt;code&gt;ViewHandler&lt;/code&gt; for this
            application, then
            passing that String to the &lt;code&gt;encodeActionURL()&lt;/code&gt;
            method
            on the &lt;code&gt;ExternalContext&lt;/code&gt;. The value of the
            acceptcharset
            attribute must be rendered as the value of "accept-charset".
            If the "styleClass" attribute is specified, render its value as the
            value of the "class" attribute. Render a "name"
            attribute with a value the same as the "id" attribute as described
            in "&lt;a
            href="../../../renderkitdocs/HTML_BASIC/renderkit-summary.html#general_encoding"&gt;General
            Notes on
            Encoding&lt;/a&gt;" regarding the "id" attribute for UIInput
            components. &lt;p class="changed_added_2_0"&gt;Obtain the &lt;code&gt;UIViewRoot
            view identifier&lt;/code&gt; and
            use it to obtain an &lt;code&gt;action URL&lt;/code&gt; by calling
            &lt;code&gt;ViewHandler.getActionURL&lt;/code&gt;.
            Use the &lt;code&gt;action URL&lt;/code&gt; to obtain an &lt;code&gt;encoded
            action URL&lt;/code&gt; by calling
            &lt;code&gt;ExternalContext.encodeActionURL&lt;/code&gt;. Obtain an
            &lt;code&gt;encoded partial action URL&lt;/code&gt; by calling
            &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;
            using &lt;code&gt;action URL&lt;/code&gt; as the argument.
            Compare the result from &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;
            with the
            value from &lt;code&gt;ExternalContext.encodeActionURL()&lt;/code&gt;.
            If they are different,
            render a hidden field with the name &lt;code&gt;javax.faces.encodedURL&lt;/code&gt;
            and the value
            of this hidden field as the value from &lt;code&gt;ExternalContext.encodePartialActionURL&lt;/code&gt;.&lt;/p&gt;
            Call &lt;code&gt;ViewHandler.writeState()&lt;/code&gt;
            before the the close of the "form" element. Render all the
            necessary hidden fields for all commandLink instances in the page
            just before the close of the "form" element.
            &lt;div class="changed_modified_2_0"&gt;
            Just before rendering the closing &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt;
            element tag, render
            any resources that have been targeted for this form:
            &lt;ul&gt;
            &lt;li&gt;Obtain a &lt;code&gt;UIViewRoot&lt;/code&gt; instance.&lt;/li&gt;
            &lt;li&gt;Obtain a &lt;code&gt;List&lt;/code&gt; of component
            resources targeted for
            this form with a call to &lt;code&gt;UIViewRoot.getComponentResources()&lt;/code&gt;
            with the &lt;code&gt;String "form"&lt;/code&gt; as the argument.&lt;/li&gt;
            &lt;li&gt;Iterate over the returned &lt;code&gt;List&lt;/code&gt; of
            &lt;code&gt;UIComponent&lt;/code&gt; instances
            and call &lt;code&gt;encodeAll&lt;/code&gt; on each &lt;code&gt;UIComponent&lt;/code&gt;
            instance.
            &lt;/ul&gt;
            &lt;/div&gt;
            &lt;/p&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
        </description>
  <tag-name>form</tag-name>
  <component>
   <component-type>shForm</component-type>
   <handler-class>br.com.gpetec.view.components.sh.handler.FormHandler</handler-class>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this form should prepend its id
                to its descendent's id during the clientId generation process.
                If this flag is not set, the default value is true.
            </description>
   <name>prependId</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                List of content types that a server processing this form
                will handle correctly
            </description>
   <name>accept</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                List of character encodings for input data
                that are accepted by the server processing
                this form.
            </description>
   <name>acceptcharset</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Content type used to submit the form to the server. If not
                specified, the default value is
                "application/x-www-form-urlencoded".
            </description>
   <name>enctype</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this form is reset.
            </description>
   <name>onreset</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this form is submitted.
            </description>
   <name>onsubmit</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Name of a frame where the response
                retrieved after this form submit is to
                be displayed.
            </description>
   <name>target</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;Renders an HTML "textarea" element.&lt;/p&gt;
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the encode description for the &lt;a
            href="javax.faces.Inputjavax.faces.Text.html#encode"&gt;Input
            Text&lt;/a&gt; renderer.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt; Render the
            clientId as the value of the "name" attribute. Render the current
            valu eof the component inside the "textarea"
            element.&lt;/p&gt; &lt;/ul&gt;
        </description>
  <tag-name>inputTextArea</tag-name>
  <component>
   <component-type>shInputTextArea</component-type>
   <renderer-type>org.gpe.textArea</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente.</description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
   <name>required</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
   <name>validator</name>
   <required>false</required>
   <method-signature>void validate(javax.faces.context.FacesContext,
                javax.faces.component.UIComponent, java.lang.Object)</method-signature>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
   <name>valueChangeListener</name>
   <required>false</required>
   <method-signature>void
                valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The number of columns to be displayed.
            </description>
   <name>cols</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The number of rows to be displayed.
            Valor default '4'.</description>
   <name>rows</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Possui valor default.
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Largura do textArea.
Valor default '423px';</description>
   <name>width</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Classe usada no label gerado pelo componente.</description>
   <name>styleClassLabel</name>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;&lt;span
            class="changed_modified_2_0"&gt;Renders&lt;/span&gt; an HTML "img"
            element. Render the clientId as the value of the "id"
            attribute.&lt;/p&gt;
            &lt;div class="changed_modified_2_0"&gt;
            &lt;p&gt;Handling the Value&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;If the "name" attribute is present, execute algorithm &lt;a
            href="../../../renderkitdocs/HTML_BASIC/javax.faces.Outputjavax.faces.resource.Script.html#ResourceCommonGetResource"&gt;Common
            Algorithm for Obtaining A Resource to Render&lt;/a&gt; to obtain a
            &lt;code&gt;Resource&lt;/code&gt; instance. Call
            &lt;code&gt;Resource.getRequestPath()&lt;/code&gt; and output the
            result as the
            value of the "src" attribute on the rendered markup.&lt;/p&gt;
            &lt;p&gt;Otherwise, if the "url" attribute is present, treat its
            value as
            if it was the value of the "value" attribute. Otherwise, if the
            "value" attribute is present, render the value of the component as
            the value of the "src" attribute, after passing it to the
            &lt;code&gt;getResourceURL()&lt;/code&gt; method of the &lt;code&gt;ViewHandler&lt;/code&gt;
            for this application, and passing the result through the
            &lt;code&gt;encodeResourceURL()&lt;/code&gt; method of the
            &lt;code&gt;ExternalContext&lt;/code&gt;.&lt;/p&gt;
            &lt;p&gt;When handling the "src" attribute,
            the value must not be escaped. For example, &lt;code&gt;&amp;&lt;/code&gt;
            must not
            be turned into &lt;code&gt;&amp;amp;amp;&lt;/code&gt;. If the
            "styleClass"
            attribute is specified, render its value as the value of the "class"
            attribute.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;/div&gt;
        </description>
  <tag-name>image</tag-name>
  <component>
   <component-type>shImage</component-type>
   <renderer-type>sh.image</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Context-relative URL to retrieve the resource associated with
                this component. This is an alias for the "value" property.
            </description>
   <name>url</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                Alternate textual description of the
                element rendered by this component.
            </description>
   <name>alt</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Override for the height of this image.
            </description>
   <name>height</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this image is to be used as a server side
                image map. Such an image must be enclosed within a hyperlink
                ("a"). A value of false causes no attribute to be rendered,
                while a value of true causes the attribute to be rendered as
                ismap="ismap".
            </description>
   <name>ismap</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                &lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;libraryName&lt;/em&gt;
                for this resource.&lt;/p&gt;&lt;/div&gt;
            </description>
   <name>library</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                URI to a long description of the image
                represented by this element.
            </description>
   <name>longdesc</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                &lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;resourceName&lt;/em&gt;
                for this resource.&lt;/p&gt;&lt;/div&gt;
            </description>
   <name>name</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The name of a client side image map (an HTML "map"
                element) for which this element provides the image.
            </description>
   <name>usemap</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Override for the width of this image.
            </description>
   <name>width</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Define qual imagem será exibida.</description>
   <name>type</name>
   <type>br.com.gpetec.view.components.CustomGraphicImage.Type</type>
  </attribute>
  <attribute>
   <description>Tamanho da imagem. Pode ser 'PEQ' ou 'GRD'.
Valor default 'GRD'.</description>
   <name>tamImagem</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>button</tag-name>
  <component>
   <component-type>shButton</component-type>
   <renderer-type>sh.button</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Conteúdo do toolTip que aparecerá ao passar o mouse sobre o componente</description>
   <name>tituloToolTip</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Posicionamento do tooltip associado a este componente.</description>
   <name>toolTipDirection</name>
   <type>org.richfaces.component.Positioning</type>
  </attribute>
  <attribute>
   <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
   <display-name>Application Action</display-name>
   <name>action</name>
   <type>javax.faces.el.MethodBinding</type>
  </attribute>
  <attribute>
   <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
   <display-name>Action Listener</display-name>
   <name>actionListener</name>
   <type>javax.faces.el.MethodBinding</type>
  </attribute>
  <attribute>
   <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
   <name>binding</name>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <name>bypassUpdates</name>
   <type>boolean</type>
  </attribute>
  <attribute>
   <name>data</name>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Flag indicating that this element must never receive focus or be included in a subsequent submit.</description>
   <display-name>Disabled Flag</display-name>
   <name>disabled</name>
   <type>boolean</type>
  </attribute>
  <attribute>
   <name>execute</name>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
   <display-name>Component Identifier</display-name>
   <name>id</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>image</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
   <display-name>Immediate Action</display-name>
   <name>immediate</name>
   <type>boolean</type>
  </attribute>
  <attribute>
   <name>limitRender</name>
   <type>boolean</type>
  </attribute>
  <attribute>
   <name>onbeforedomupdate</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>onbegin</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is clicked over this element.</description>
   <display-name>Button Click Script</display-name>
   <name>onclick</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>oncomplete</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is double clicked over this element.</description>
   <display-name>Double Click Script</display-name>
   <name>ondblclick</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a key is pressed down over this element.</description>
   <display-name>Key Down Script</display-name>
   <name>onkeydown</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a key is pressed and released over this element.</description>
   <display-name>Key Press Script</display-name>
   <name>onkeypress</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a key is released over this element.</description>
   <display-name>Key Up Script</display-name>
   <name>onkeyup</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is pressed down over this element.</description>
   <display-name>Mouse Down Script</display-name>
   <name>onmousedown</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is moved within this element.</description>
   <display-name>Mouse Move Script</display-name>
   <name>onmousemove</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is moved away from this element.</description>
   <display-name>Mouse Out Script</display-name>
   <name>onmouseout</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is moved onto this element.</description>
   <display-name>Mouse Over Script</display-name>
   <name>onmouseover</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript code executed when a pointer button is released over this element.</description>
   <display-name>Mouse Up Script</display-name>
   <name>onmouseup</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>render</name>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
   <display-name>Rendered Flag</display-name>
   <name>rendered</name>
   <type>boolean</type>
  </attribute>
  <attribute>
   <name>status</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>CSS style(s) to be applied when this component is rendered.</description>
   <display-name>CSS Styles</display-name>
   <name>style</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
   <display-name>CSS Style Classes</display-name>
   <name>styleClass</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Advisory title information about markup elements generated for this component.</description>
   <display-name>Advisory Title</display-name>
   <name>title</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Type of button to create. Can be one of "submit", "button", "image" and "reset". If not specified, the default value is "submit".</description>
   <display-name>Button Type</display-name>
   <name>type</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>The current value of this component.</description>
   <display-name>Value</display-name>
   <name>value</name>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Tipo de botão que será usado. Define principalmente a imagem que será exibida.</description>
   <name>crud</name>
   <type>br.com.gpetec.view.components.CustomCommandButton.Crud</type>
  </attribute>
  <attribute>
   <description>Tamanho da imagem do botão a ser exibido. Pode ser 'PEQ' ou 'GRD'.
Valor default 'GRD'.</description>
   <name>tamImagem</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>alt</name>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;Renders an HTML "input" element of type "checkbox".&lt;/p&gt;
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Obtain the &lt;code&gt;Map&lt;/code&gt; from the
            "requestParameterMap"
            property of the &lt;code&gt;ExternalContext&lt;/code&gt;. If there
            is no
            entry in the &lt;code&gt;Map&lt;/code&gt; for the "clientId" of this
            component, pass "false" to the &lt;code&gt;setSubmittedValue()&lt;/code&gt;
            method of the component, which must be an instance of
            &lt;code&gt;EditableValueHolder&lt;/code&gt;. If there is an entry,
            and its
            value is equal, ignoring case and without quotes, to any of the
            Strings: "on", "yes" or "true" pass true to the
            &lt;code&gt;setSubmittedValue()&lt;/code&gt; method of the
            component.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;
            Render the clientId of the component as the value of the "name"
            attribute. If the current value of the component is "true",
            output the "checked" attribute (must be rendered as
            checked="checked").
            If the "styleClass" attribute is specified, render its value as the
            value
            of the "class" attribute.&lt;/p&gt; &lt;/ul&gt;
        </description>
  <tag-name>selectBooleanCheckbox</tag-name>
  <component>
   <component-type>shSelectBooleanCheckbox</component-type>
   <renderer-type>gpe.checkbox</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente caso ele esteja dentro de um containerFormulario.</description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
   <name>required</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
   <name>validator</name>
   <required>false</required>
   <method-signature>void validate(javax.faces.context.FacesContext,
                javax.faces.component.UIComponent, java.lang.Object)</method-signature>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
   <name>valueChangeListener</name>
   <required>false</required>
   <method-signature>void
                valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
 </tag>
 <tag>
  <description>
            &lt;p&gt;Render an HTML option list.&lt;/p&gt;
            &lt;p&gt;&lt;a name="decode"&gt;Decode Behavior&lt;/a&gt;&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;See the &lt;a
            href="SelectManyListbox.html"&gt;"Decode
            Behavior for UISelectOne Components"&lt;/a&gt; section.&lt;/p&gt;
            &lt;/ul&gt;
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            &lt;ul&gt;
            &lt;p&gt;Render an HTML "select" element. Render the clientId of the
            component as the value of the "name" attribute. If the
            "styleClass" attribute is specified, render its value as the value
            of the "class" attribute on the "select" element. If the component
            to be rendered is a UISelectMany, render "true" as the value of
            the "multiple" attribute. Use the number of items as the value of
            the "size" attribute. See the &lt;a
            href="SelectManyListbox.html"&gt;"Rendering
            the option elements" &lt;/a&gt; specification for
            &lt;code&gt;ListboxRenderer&lt;/code&gt; for more detail on how to
            render the
            "option" elements in this renderer.&lt;/p&gt;
            &lt;/ul&gt;
        </description>
  <tag-name>selectOneMenu</tag-name>
  <component>
   <component-type>shSelectOneMenu</component-type>
   <renderer-type>org.sh.select</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Indica se o componente agrupa outros componentes. 
				Uma de suas utilizações é de informar ao containerFormulario que
				ele deve considerar apenas os filhos deste componente para serem escritos.
				Valor default é false</description>
   <name>groupComponent</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica o label que será renderizado junto com o componente caso ele esteja dentro de um containerFormulario.</description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
   <name>required</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
   <name>validator</name>
   <required>false</required>
   <method-signature>void validate(javax.faces.context.FacesContext,
                javax.faces.component.UIComponent, java.lang.Object)</method-signature>
  </attribute>
  <attribute>
   <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
   <name>valueChangeListener</name>
   <required>false</required>
   <method-signature>void
                valueChange(javax.faces.event.ValueChangeEvent)</method-signature>
  </attribute>
  <attribute>
   <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                CSS style class to apply to the rendered label
                on disabled options.
            </description>
   <name>disabledClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style class to apply to the rendered label
                on enabled options.
            </description>
   <name>enabledClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                &lt;p class="changed_modified_2_0"&gt;
                Flag indicating that, if this component is activated by the
                user,
                The "no selection option", if any, must be hidden.&lt;/p&gt;
            </description>
   <name>hideNoSelectionOption</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus.
            </description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when this element receives focus.
            </description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
                released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
 </tag>
 <!-- Funções -->
 <function>
  <function-name>object</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Object object(java.lang.Object)</function-signature>
 </function>
 <function>
  <function-name>validateBrowser</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String validateBrowser()</function-signature>
 </function>
 <function>
  <function-name>getMessage</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String getMessage(java.lang.String)</function-signature>
 </function>
 <function>
  <function-name>abaValue</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String abaValue(java.lang.String)</function-signature>
 </function>
 <function>
  <function-name>getBoolean</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Boolean getBoolean(java.lang.Object)</function-signature>
 </function>
 <function>
  <function-name>getPermissao</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Boolean getPermissao(java.lang.String)</function-signature>
 </function>
 <function>
  <function-name>getPermissaoAcessoProjeto</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Boolean getPermissaoAcessoProjeto(java.lang.String)</function-signature>
 </function>
 <function>
  <function-name>getPermissaoAcessoConta</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Boolean getPermissaoAcessoConta(java.lang.String)</function-signature>
 </function>
 <function>
  <function-name>formataNomeWorkspace</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String formataNomeWorkspace(br.com.gpetec.scrumhalf.vo.HasWorkspace)</function-signature>
 </function>
 <function>
  <function-name>formataPapeis</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String formataPapeis(br.com.gpetec.scrumhalf.vo.HasRoles)</function-signature>
 </function>
 <function>
  <function-name>getDescricaoConvite</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String getDescricaoConvite(br.com.gpetec.scrumhalf.vo.ConviteVO)</function-signature>
 </function>
 <function>
  <function-name>getTipoDescricaoConvite</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String getTipoDescricaoConvite(br.com.gpetec.scrumhalf.vo.ConviteVO)</function-signature>
 </function>
 <function>
  <function-name>getCopyright</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String getCopyright()</function-signature>
 </function>
 <function>
  <function-name>getPermissaoAcesso</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Boolean getPermissaoAcesso(java.lang.String, java.lang.String)</function-signature>
 </function>
 <function>
  <function-name>length</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.Integer length(java.util.Collection)</function-signature>
 </function>
 <function>
  <function-name>statusProjeto</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String statusProjeto()</function-signature>
 </function>
 <tag>
  <tag-name>numero</tag-name>
  <source>../../componentes/formulario/numero.xhtml</source>
 </tag>
 <tag>
  <tag-name>data</tag-name>
  <component>
   <component-type>shCalendar</component-type>
   <renderer-type>org.sh.calendar</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Unique identifier of the component in a namingContainer.</description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</description>
   <name>rendered</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>An el expression referring to a server side UIComponent instance in a backing bean.</description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Value of the component.</description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>An el expression or a literal text that defines a converter for the component. When it's an EL expression, it's resolved to a converter instance. 
    In case it's a static text, it must refer to a converter id.</description>
   <name>converter</name>
   <required>false</required>
   <type>java.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>When set true, process validations logic is executed at apply request values phase for this component. Default is false.</description>
   <name>immediate</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Marks component as required.</description>
   <name>required</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>A method expression referring to a method validationg the input.</description>
   <name>validator</name>
   <required>false</required>
   <type>javax.faces.validator.Validator</type>
  </attribute>
  <attribute>
   <description>A method binding expression referring to a method for handling a valuchangeevent.</description>
   <name>valueChangeListener</name>
   <required>false</required>
   <type>javax.faces.event.ValueChangeListener</type>
  </attribute>
  <attribute>
   <description>Message to display when required field validation fails.</description>
   <name>requiredMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Message to display when conversion fails.</description>
   <name>converterMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Message to display when validation fails.</description>
   <name>validatorMessage</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Access key to transfer focus to the input element.</description>
   <name>accesskey</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Alternate textual description of the input element.</description>
   <name>alt</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Controls browser autocomplete behavior.</description>
   <name>autocomplete</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Direction indication for text that does not inherit directionality.</description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Disables the input element, default is false.</description>
   <name>disabled</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>A localized user presentable name.</description>
   <name>label</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>A localized user presentable name.</description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Maximum number of characters that may be entered in this field.</description>
   <name>maxlength</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when input element loses focus.</description>
   <name>onblur</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when input element loses focus and its value has been modified since gaining focus.</description>
   <name>onchange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when input element is clicked.</description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when input element is double clicked.</description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when input element receives focus.</description>
   <name>onfocus</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a key is pressed down over input element.</description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a key is pressed and released over input element.</description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a key is released over input element.</description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a pointer input element is pressed down over input element.</description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a pointer input element is moved within input element.</description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a pointer input element is moved away from input element.</description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a pointer input element is moved onto input element.</description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a pointer input element is released over input element.</description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when text within input element is selected by user.</description>
   <name>onselect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Flag indicating that this input element will prevent changes by the user.</description>
   <name>readonly</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>Number of characters used to determine the width of the input element.</description>
   <name>size</name>
   <required>false</required>
   <type>int</type>
  </attribute>
  <attribute>
   <description>Inline style of the input element.</description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Style class of the input element.</description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Advisory tooltip information.</description>
   <name>tabindex</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Advisory tooltip information.</description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Name of the client side widget.</description>
   <name>widgetVar</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Sets calendar's minimum visible date.</description>
   <name>mindate</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Sets calendar's maximum visible date.</description>
   <name>maxdate</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Enables multiple page rendering.</description>
   <name>pages</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Defines how the calendar will be displayed. Default is popup</description>
   <name>mode</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>DateFormat pattern for localization.</description>
   <name>pattern</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Locale to be used for labels and conversion.</description>
   <name>locale</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Enables month/year navigator. Default is false.</description>
   <name>navigator</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>String or a java.util.TimeZone instance to specify the timezone used for date conversion, defaults to TimeZone.getDefault()</description>
   <name>timeZone</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Makes input text of a popup calendar readonly. Default is false.</description>
   <name>readonlyInput</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Visibility of button panel containing today and done buttons. Default is false.</description>
   <name>showButtonPanel</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Effect to use when displaying and showing the popup calendar.</description>
   <name>effect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Duration of the effect. Default is normal.</description>
   <name>effectDuration</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side event that displays the popup calendar.</description>
   <name>showOn</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Displays the week number next to each week. Default is false.</description>
   <name>showWeek</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Disables weekend columns. Default is false.</description>
   <name>disabledWeekends</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Displays days belonging to other months. Default is false.</description>
   <name>showOtherMonths</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Enables selection of days belonging to other months. Default is false.</description>
   <name>selectOtherMonths</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Year range for the navigator, default is "c-10:c+10"</description>
   <name>yearRange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Shows only time picker without date.</description>
   <name>timeOnly</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Hour steps, default is 1.</description>
   <name>stepHour</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Minute steps, default is 1.</description>
   <name>stepMinute</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Second steps, default is 1.</description>
   <name>stepSecond</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Minimum boundary for hour selection. Default is 0.</description>
   <name>minHour</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Maximum boundary for hour selection. Default is 23.</description>
   <name>maxHour</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Minimum boundary for minute selection. Default is 0.</description>
   <name>minMinute</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Maximum boundary for minute selection. Default is 59.</description>
   <name>maxMinute</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Minimum boundary for second selection. Default is 0.</description>
   <name>minSecond</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Maximum boundary for second selection. Default is 59.</description>
   <name>maxSecond</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Sets the initial date when value is not populated.</description>
   <name>pagedate</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>Callback to execute before displaying a date, used to customize date display.</description>
   <name>beforeShowDay</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <tag-name>coluna</tag-name>
  <source>../../componentes/coluna.xhtml</source>
  <attribute>
   <name>metadeTela</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica se a coluna é do tamanho de 2 normais ou não</description>
   <name>colunaLarga</name>
  </attribute>
 </tag>
 <function>
  <function-name>getNomeUsuario</function-name>
  <function-class>br.com.gpetec.view.components.JsfFunctions</function-class>
  <function-signature>java.lang.String getNomeUsuario()</function-signature>
 </function>
 <tag>
  <tag-name>separator</tag-name>
  <source>../../componentes/separator.xhtml</source>
 </tag>
 <tag>
  <description>
            

          &lt;p&gt;Render the markup for a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

          &lt;p&gt;Decode Behavior&lt;/p&gt;

          &lt;ul&gt;

          &lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;

          &lt;/ul&gt;

          &lt;p&gt;Encode Behavior&lt;/p&gt;

          &lt;ul&gt;

          &lt;p&gt;Render the starting &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element tag. Just before rendering the
          closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; element tag, render any resources that have been targeted
          for this "body" element:
          &lt;ul&gt;
          &lt;li&gt;Obtain a &lt;code&gt;UIViewRoot&lt;/code&gt; instance.&lt;/li&gt;

          &lt;li&gt;Obtain a &lt;code&gt;List&lt;/code&gt; of component resources targeted for
          this "body" element with a call to
          &lt;code&gt;UIViewRoot.getComponentResources()&lt;/code&gt; with the
          &lt;code&gt;String "body"&lt;/code&gt; as the argument.  Render the ending
          &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; element tag.&lt;/li&gt;

          &lt;li&gt;Iterate over the returned &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;UIComponent&lt;/code&gt; instances
          and call &lt;code&gt;encodeAll&lt;/code&gt; on each &lt;code&gt;UIComponent&lt;/code&gt; instance.
          &lt;/ul&gt;

          &lt;p&gt;Any attributes declared on the element must be passed through
          unmodified to the rendered output.&lt;/p&gt;

          
        </description>
  <tag-name>body</tag-name>
  <component>
   <component-type>javax.faces.Output</component-type>
   <renderer-type>org.sh.body</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>
                Direction indication for text that does not inherit directionality.
              Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).
            </description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Code describing the language used in the generated markup
              for this component.
            </description>
   <name>lang</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              clicked over this element.
            </description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              double clicked over this element.
            </description>
   <name>ondblclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
              pressed down over this element.
            </description>
   <name>onkeydown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
              pressed and released over this element.
            </description>
   <name>onkeypress</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a key is
              released over this element.
            </description>
   <name>onkeyup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when the user agent finishes loading
              a window or all frames within a frameset.
            </description>
   <name>onload</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              pressed down over this element.
            </description>
   <name>onmousedown</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              moved within this element.
            </description>
   <name>onmousemove</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              moved away from this element.
            </description>
   <name>onmouseout</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              moved onto this element.
            </description>
   <name>onmouseover</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when a pointer button is
              released over this element.
            </description>
   <name>onmouseup</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Javascript code executed when the user agent removes
              a document from a window or frame.
            </description>
   <name>onunload</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Space-separated list of CSS style class(es) to be applied when
              this element is rendered.  This value must be passed through
              as the "class" attribute on generated markup.
            </description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Advisory title information about markup elements generated
              for this component.
            </description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
 </tag>
 <tag>
  <tag-name>script</tag-name>
  <component>
   <component-type>javax.faces.Output</component-type>
   <renderer-type>org.sh.script</renderer-type>
   <handler-class>br.com.gpetec.view.components.sh.handler.SHScriptHandler</handler-class>
  </component>
  <attribute>
   <description>Flag para instruir a renderização desse script dentro do evento de ready da window</description>
   <name>ready</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;libraryName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;
            </description>
   <name>library</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                &lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;resourceName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;
                &lt;div class="changed_modified_2_0_rev_a"&gt;&lt;p&gt;This attribute is required.&lt;/p&gt;&lt;/div&gt;
            </description>
   <name>name</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Not working.
Ao definir um src, essa tag se transforma em um &lt;link&gt; e é gerado no head da página</description>
   <name>src</name>
  </attribute>
  <attribute>
   <description>Aceita:
  - shhead - para ser escrito no &lt;head&gt; da página
  - shStyleBody - para ser escrito no &lt;body&gt; da página.

Caso um atributo src não seja definido, o valor default é "shStyleBody"</description>
   <name>target</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>popup</tag-name>
  <source>../../componentes/popup.xhtml</source>
  <attribute>
   <name>id</name>
  </attribute>
  <attribute>
   <name>rendered</name>
  </attribute>
  <attribute>
   <description>conteúdo do popup. Deve ser um arquivo .xhtml</description>
   <name>src</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Título exibido quando o popup está maximizado.</description>
   <name>maximizedTitle</name>
  </attribute>
  <attribute>
   <description>Título exibido quando o popup está minimizado.</description>
   <name>minimizedTitle</name>
  </attribute>
  <attribute>
   <description>Indica se o popup deve aparecer inicialmente maximizado.</description>
   <name>showMaximized</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Indica que o popup deve ser exibido, inicialmente, minimizado.</description>
   <name>showMinimized</name>
  </attribute>
  <attribute>
   <name>titleBinding</name>
  </attribute>
  <attribute>
   <name>viewModelCallback</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>painelBotoes</tag-name>
  <source>../../componentes/painelBotoes.xhtml</source>
  <attribute>
   <name>rendered</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>head</tag-name>
  <component>
   <component-type>javax.faces.Output</component-type>
   <renderer-type>org.sh.head</renderer-type>
   <handler-class/>
  </component>
 </tag>
 <tag>
  <description>&lt;div class="changed_added_2_0"&gt;
            Agrupa o conteúdo de todas as tags "style" em um único bloco de estilo, no início do corpo da página.
            
            &lt;p&gt;Render the markup for a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element that
            renders the style &lt;code&gt;Resource&lt;/code&gt; specified by the optional
            &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;library&lt;/code&gt; attributes.&lt;/p&gt;
            
            &lt;p&gt;Decode Behavior&lt;/p&gt;
            
            &lt;ul&gt;
            
            &lt;p&gt;No action is required during decode for this renderer.&lt;/p&gt;
            
            &lt;/ul&gt;
            
            &lt;p&gt;Encode Behavior&lt;/p&gt;
            
            &lt;ul&gt;
            
            &lt;p&gt;Use the algorithm &lt;em&gt;Common Encode Behavior&lt;/em&gt; for
            &lt;code&gt;encodeBegin()&lt;/code&gt;, &lt;code&gt;encodeChildren()&lt;/code&gt; and
            &lt;code&gt;getRendersChildren()&lt;/code&gt;.&lt;/p&gt;
            
            &lt;p&gt;For &lt;code&gt;encodeEnd()&lt;/code&gt;, use the algorithm &lt;a
            href="javax.faces.Outputjavax.faces.resource.Script.html#ResourceCommonGetResource"&gt;Common
            Algorithm for Obtaining A Resource to Render&lt;/a&gt; to obtain a
            reference to the &lt;code&gt;Resource&lt;/code&gt; to be encoded.&lt;/p&gt;
            
            &lt;p&gt;Output a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element.  Use the result from
            calling &lt;code&gt;resource.getRequestPath()&lt;/code&gt; as the value of the
            "href" attribute, the result from calling
            &lt;code&gt;resource.getContentType()&lt;/code&gt; as the value of the "type"
            attribute, the literal string "stylesheet" as the value of the "rel"
            attribute, and the literal string "screen" as the value of the "media"
            attribute.&lt;/p&gt;
            
            &lt;p&gt;The implementation of this renderer must have a &lt;a target="_"
            href="../../javadocs/javax/faces/event/ListenerFor.html"&gt;&lt;code&gt;@ListenerFor&lt;/code&gt;&lt;/a&gt;
            annotation attached to it, at the class level, declaring &lt;a target="_"
            href="../../javadocs/javax/faces/event/PostAddToViewEvent.html"&gt;&lt;code&gt;PostAddToViewEvent.class&lt;/code&gt;&lt;/a&gt;
            as the value of the &lt;code&gt;systemEventClass&lt;/code&gt; attribute.  The presence of
            this annotation on a renderer implies the renderer implements &lt;a target="_"
            href="../../javadocs/javax/faces/event/ComponentSystemEventListener.html"&gt;&lt;code&gt;ComponentSystemEventListener&lt;/code&gt;&lt;/a&gt;,
            which this renderer must do.  The implementation of
            &lt;code&gt;processEvent()&lt;/code&gt; must extract the &lt;code&gt;UIComponent&lt;/code&gt;
            from the argument event pass it to &lt;a target="_"
            href="../../javadocs/javax/faces/component/UIViewRoot.html#addComponentResource(javax.faces.context.FacesContext,%20javax.faces.component.UIComponent,%20java.lang.String)"&gt;&lt;code&gt;UIViewRoot.addComponentResource()&lt;/code&gt;&lt;/a&gt;, specifying
            the literal string "&lt;code&gt;head&lt;/code&gt;" as the last argument.&lt;/p&gt;
            
            &lt;p&gt;The stylsheet renderer must ensure that any stylesheets are included in the &amp;lt;head&amp;gt; of the document.
            &lt;/p&gt;
            
            &lt;/div&gt;
  </description>
  <tag-name>style</tag-name>
  <component>
   <component-type>javax.faces.Output</component-type>
   <renderer-type>org.sh.style</renderer-type>
   <handler-class>br.com.gpetec.view.components.sh.handler.SHStyleHandler</handler-class>
  </component>
  <attribute>
   <description>
                Converter instance registered with this component.
            </description>
   <name>converter</name>
   <required>false</required>
   <type>javax.faces.convert.Converter</type>
  </attribute>
  <attribute>
   <description>
                The component identifier for this component.  This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit.  The default value for this property is true.
            </description>
   <name>rendered</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>
                The current value of this component.
            </description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>
                &lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;libraryName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;
            </description>
   <name>library</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                &lt;div class="changed_added_2_0"&gt;&lt;p&gt;The &lt;em&gt;resourceName&lt;/em&gt; for this resource.&lt;/p&gt;&lt;/div&gt;
                &lt;div class="changed_modified_2_0_rev_a"&gt;&lt;p&gt;This attribute is required.&lt;/p&gt;&lt;/div&gt;
            </description>
   <name>name</name>
   <required>true</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Not working.
Ao definir um src, essa tag se transforma em um &lt;link&gt; e é gerado no head da página</description>
   <name>src</name>
  </attribute>
  <attribute>
   <description>Aceita:
  - shhead - para ser escrito no &lt;head&gt; da página
  - shStyleBody - para ser escrito no &lt;body&gt; da página.

Caso um atributo src não seja definido, o valor default é "shStyleBody"</description>
   <name>target</name>
  </attribute>
 </tag>
 <tag>
  <description>Componente ContextMenu</description>
  <tag-name>contextMenu</tag-name>
  <component>
   <component-type>customContextMenu</component-type>
   <renderer-type>gpe.contextMenu</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Unique identifier of the component in a namingContainer.</description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</description>
   <name>rendered</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>An el expression referring to a server side UIComponent instance in a backing bean.</description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Id of the component to attach to.</description>
   <name>for</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Style of the main container element.</description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Style class of the main container element.</description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Menu model instance to create menu programmatically.</description>
   <name>model</name>
   <required>false</required>
   <type>org.primefaces.model.MenuModel</type>
  </attribute>
  <attribute>
   <description>Type of tree nodes to get attached.</description>
   <name>nodeType</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Event to bind the contextmenu default is right click.</description>
   <name>event</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute before context menu is shown.</description>
   <name>beforeShow</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <name>koReference</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <description>Componente ContextMenuItem</description>
  <tag-name>menuItem</tag-name>
  <component>
   <component-type>contextMenuItem</component-type>
   <renderer-type>gpe.contextMenuItem</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Icone que sera renderizado a esquerda do texto</description>
   <name>icon</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica se o elemento esta habilitado ou não</description>
   <name>enabled</name>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Estilo inline do item</description>
   <name>style</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Texto que sera escrito para o item</description>
   <name>title</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>id do elemento ao qual o menu de contexto esta associado</description>
   <name>for</name>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Unique identifier of the component in a namingContainer.</description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</description>
   <name>rendered</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>An el expression referring to a server side UIComponent instance in a backing bean.</description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Label of the component.</description>
   <name>value</name>
   <required>false</required>
   <type>java.lang.Object</type>
  </attribute>
  <attribute>
   <description>An actionlistener to process when command is executed.</description>
   <name>actionListener</name>
   <required>false</required>
   <type>javax.faces.event.ActionListener</type>
  </attribute>
  <attribute>
   <description>A method expression or a string outcome to process when command is executed.</description>
   <name>action</name>
   <required>false</required>
   <type>javax.el.MethodExpression</type>
  </attribute>
  <attribute>
   <description>Boolean value that determines the phaseId of the action event, 
    when true actions are processed at "Apply Request Values", when false at "Invoke Application" phase.</description>
   <name>immediate</name>
   <required>false</required>
   <type>boolean</type>
  </attribute>
  <attribute>
   <description>Url to be navigated when menuitem is clicked.</description>
   <name>url</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Target type of url navigation.</description>
   <name>target</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>StyleClass of the menuitem label.</description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript event handler for click event.</description>
   <name>onclick</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side id of the component(s) to be updated after async partial submit request.</description>
   <name>update</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Component id(s) to process partially instead of whole view.</description>
   <name>process</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript handler to execute before ajax request is begins.</description>
   <name>onstart</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Disables or enables the menu item.</description>
   <name>disabled</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Javascript handler to execute when ajax request is completed.</description>
   <name>oncomplete</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript handler to execute when ajax request fails.</description>
   <name>onerror</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Javascript handler to execute when ajax request succeeds.</description>
   <name>onsuccess</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Global ajax requests are listened by ajaxStatus component, setting global to false will not trigger ajaxStatus.</description>
   <name>global</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>When set to true, ajax requests are not queued.</description>
   <name>async</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Specifies submit mode.</description>
   <name>ajax</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>When enabled, only values related to partially processed components would be serialized for ajax 
            instead of whole form.</description>
   <name>partialSubmit</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Used to resolve a navigation case.</description>
   <name>outcome</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Whether to include page parameters in target URI. Default is false.</description>
   <name>includeViewParams</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Identifier of the target page which should be scrolled to.</description>
   <name>fragment</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Indica se um componente contém elementos que podem ser "splitados" quando são filhos de componentes baseados em NamingContainer;</description>
   <name>groupComponent</name>
  </attribute>
  <attribute>
   <name>data-bind</name>
  </attribute>
  <attribute>
   <description>Define se a quantidade de elementos, sobre os quais a ação será executada, será visível ou não na linha.
- O valor só aparece caso mais de um item tenha sido selecionado e o valor de selection mode seja 'many'</description>
   <name>selectionMode</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <description>TabView is a tabbed panel component featuring client side tabs, dynamic content loading with ajax and content transition effects.</description>
  <tag-name>tabView</tag-name>
  <component>
   <component-type>shTabView</component-type>
   <renderer-type>sh.tabView</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Unique identifier of the component in a namingContainer.</description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</description>
   <name>rendered</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>An el expression referring to a server side UIComponent instance in a backing bean.</description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Name of the client side widget.</description>
   <name>widgetVar</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Index of the active tab. Default is 0.</description>
   <name>activeIndex</name>
   <required>false</required>
   <type>java.lang.Integer</type>
  </attribute>
  <attribute>
   <description>Name of the transition effect.</description>
   <name>effect</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Duration of the transition effect. Default is normal.</description>
   <name>effectDuration</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Specifies the toggleMode. Default is false.</description>
   <name>dynamic</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>When tab contents are lazy loaded by ajax toggleMode, 
              caching only retrieves the tab contents once and subsequent toggles of a cached tab does not communicate with server.
              If caching is turned off, tab contents are reloaded from server each time tab is clicked. Default is true.</description>
   <name>cache</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a tab is clicked.</description>
   <name>onTabChange</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute when a tab is shown.</description>
   <name>onTabShow</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Inline style of the main container.</description>
   <name>style</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Style class of the main container.</description>
   <name>styleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Name of collection iterator to use in dynamic number of tabs.</description>
   <name>var</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>List to iterate to display dynamic number of tabs.</description>
   <name>value</name>
   <required>false</required>
   <type>java.util.List</type>
  </attribute>
  <attribute>
   <description>Orientation of the tab headers, valid values are "top" and "bottom".</description>
   <name>orientation</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Client side callback to execute before a tab is closed. Return false to prevent closing.</description>
   <name>onTabClose</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Defines text direction, valid values are "ltr" (default) and "rtl".</description>
   <name>dir</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <description>Tab is a generic container component used by other PrimeFaces components such as tabView or accordionPanel.</description>
  <tag-name>tab</tag-name>
  <component>
   <component-type>shTab</component-type>
   <handler-class/>
  </component>
  <attribute>
   <description>Unique identifier of the component in a namingContainer.</description>
   <name>id</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Boolean value to specify the rendering of the component, when set to false component will not be rendered.</description>
   <name>rendered</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>An el expression referring to a server side UIComponent instance in a backing bean.</description>
   <name>binding</name>
   <required>false</required>
   <type>javax.faces.component.UIComponent</type>
  </attribute>
  <attribute>
   <description>Title text of the tab.</description>
   <name>title</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Title container inner style.</description>
   <name>titleStyle</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Title container style class.</description>
   <name>titleStyleClass</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
  <attribute>
   <description>Disables tab element if true.</description>
   <name>disabled</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Makes the tab closable by displaying a close icon.</description>
   <name>closable</name>
   <required>false</required>
   <type>java.lang.Boolean</type>
  </attribute>
  <attribute>
   <description>Tooltip of the tab header.</description>
   <name>titletip</name>
   <required>false</required>
   <type>java.lang.String</type>
  </attribute>
 </tag>
 <tag>
  <tag-name>panel</tag-name>
  <component>
   <component-type>shPanel</component-type>
   <renderer-type>sh.panel</renderer-type>
   <handler-class/>
  </component>
 </tag>
 <tag>
  <tag-name>messages</tag-name>
  <component>
   <component-type>shMessages</component-type>
   <renderer-type>sh.messages</renderer-type>
   <handler-class/>
  </component>
  <attribute>
   <name>autoUpdate</name>
  </attribute>
  <attribute>
   <name>escape</name>
  </attribute>
  <attribute>
   <name>severity</name>
  </attribute>
  <attribute>
   <name>closable</name>
  </attribute>
  <attribute>
   <name>for</name>
  </attribute>
  <attribute>
   <name>globalOnly</name>
  </attribute>
  <attribute>
   <name>showDetail</name>
  </attribute>
  <attribute>
   <name>showSummary</name>
  </attribute>
  <attribute>
   <name>redisplay</name>
  </attribute>
  <attribute>
   <name>id</name>
  </attribute>
  <attribute>
   <name>rendered</name>
  </attribute>
 </tag>
 <tag>
  <tag-name>tooltip</tag-name>
  <handler-class>br.com.gpetec.view.components.sh.handler.TooltipHandler</handler-class>
  <attribute>
   <name>rendered</name>
  </attribute>
  <attribute>
   <name>value</name>
  </attribute>
  <attribute>
   <description>Flag que indica se é para usar o atributo data-bind do pai</description>
   <name>useBinding</name>
  </attribute>
 </tag>
</facelet-taglib>
