package com.primefaces.components;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;

import javax.faces.component.FacesComponent;
import javax.faces.component.UIComponentBase;
import javax.faces.component.behavior.ClientBehaviorHolder;
import javax.faces.context.FacesContext;
import javax.faces.event.AjaxBehaviorEvent;
import javax.faces.event.FacesEvent;

import org.primefaces.util.Constants;

@FacesComponent(CustomSocket.COMPONENT_TYPE)
public class CustomSocket extends UIComponentBase implements ClientBehaviorHolder {
	
	public static final String TAG_NAME = "socket";
	public static final String COMPONENT_TYPE = "shSocket";
	public static final String COMPONENT_FAMILY = "socket";
	
	private static final Collection<String> EVENT_NAMES = Collections.unmodifiableCollection(Arrays.asList("socket"));
	
	public enum PropertyKeys {
	}
	
	@Override
	public String getFamily() {
		return COMPONENT_FAMILY;
	}
	
	@Override
	public Collection<String> getEventNames() {
		return EVENT_NAMES;
	}
	
	@Override
	public void queueEvent(FacesEvent event) {
		FacesContext context = getFacesContext();
        
        if(isRequestSource(context) && event instanceof AjaxBehaviorEvent) {
            Map<String,String> params = context.getExternalContext().getRequestParameterMap();

            String eventName = params.get(Constants.PARTIAL_BEHAVIOR_EVENT_PARAM);
            String clientId = this.getClientId(context);

            AjaxBehaviorEvent behaviorEvent = (AjaxBehaviorEvent) event;

            if(eventName.equals("drop")) {
                String tarefa_param = params.get(clientId + "_drop_tarefa");
                String faseOrigem_param = params.get(clientId + "_drop_origem");
                String faseDestino_param = params.get(clientId + "_drop_destino");
                String historia_param = params.get(clientId + "_drop_historia");
                
                HistoriaVO historia = null;
    			FaseVO faseOrigem = null;
    			FaseVO faseDestino = null;
    			TarefaVO tarefa =null;
    			
    			if(historia_param!=null){
    				historia = this.getData().getHistorias().get(Integer.parseInt(historia_param));
    				if(faseOrigem_param!=null){
    					faseOrigem = this.getData().getFases().get(Integer.parseInt(faseOrigem_param));
    					
    					if(tarefa_param!=null){
    						Map<Integer, TarefaVO> tarefas= historia.getMapaTarefasPorFase().get(faseOrigem);
    						
    						if(tarefas!=null){
    							tarefa = tarefas.get(Integer.parseInt(tarefa_param));
    						}
    					}
    					
    				}
    				
    				if(faseDestino_param!=null){
    					faseDestino = this.getData().getFases().get(Integer.parseInt(faseDestino_param));
    				}
    				
    			}
                DropEvent dropEvent = new DropEvent(this, behaviorEvent.getBehavior(), historia, faseOrigem, faseDestino, tarefa);
                dropEvent.setPhaseId(dropEvent.getPhaseId());

                super.queueEvent(dropEvent);
            }
        }
        else {
            super.queueEvent(event);
        }
    }
 
 	private boolean isRequestSource(FacesContext context) {
	    return this.getClientId(context).equals(context.getExternalContext().getRequestParameterMap().get(Constants.PARTIAL_SOURCE_PARAM));
	}
}
